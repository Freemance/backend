// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  CONTRACTOR
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  state     Boolean  @default(false)
  role      Role     @default(USER)
  profile   Profile?
}

model Profile {
  id       Int    @id @default(autoincrement())
  user     User   @relation(fields: [userId], references: [id])
  userId   Int
  name     String
  lastName String

  // Relations fields
  tag               Tag?           @relation(fields: [tagId], references: [id])
  tagId             Int?
  skills            ProfileSkill[]
  socialLinks       SocialLink[]
  employmentHistory Job[]
  courses           Course[]
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  profiles  Profile[]
}

model Skill {
  id        Int            @id @default(autoincrement())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  name      String
  profiles  ProfileSkill[]
}

// relacion implicita vamos ahora

enum LVL {
  NOVICE
  BEGINER
  SKILLFULL
  EXPERIENCED
  EXPERT
}

model ProfileSkill {
  skill      Skill    @relation(fields: [skillId], references: [id])
  skillId    Int
  profile    Profile  @relation(fields: [profileId], references: [id])
  profileId  Int
  assignedAt DateTime @default(now())
  level      LVL      @default(NOVICE)

  @@id([skillId, profileId])
}

model SocialLink {
  id        Int     @id @default(autoincrement())
  linkedin  String?
  instagram String?
  facebook  String?
  telegram  String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

model Job {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String
  company     String
  description String?
  starDate    DateTime
  endDate     DateTime
  profile     Profile? @relation(fields: [profileId], references: [id])
  profileId   Int?
}

model Course {
  id          Int       @id @default(autoincrement())
  course      String?
  institution String?
  starDate    DateTime?
  endDate     DateTime?
  profile     Profile?  @relation(fields: [profileId], references: [id])
  profileId   Int?
}
