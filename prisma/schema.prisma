// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  MANAGER
  ADMIN
}

model User {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  email     String   @unique
  password  String
  state     Boolean  @default(false)
  role      Role     @default(USER)
  profile   Profile?
}

model Profile {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  slykUser     String
  // Optional fileds
  avatar       Int?
  jobTitle     String?
  bio          String?
  country      String?
  city         String?
  address      String?
  postalCode   String?
  placeOfBirth String?
  dateOfBirth  DateTime?
  phone        String?

  // Relations fields
  user              User           @relation(fields: [userId], references: [id])
  userId            Int
  tag               Tag?           @relation(fields: [tagId], references: [id])
  tagId             Int?
  skills            ProfileSkill[]
  socialLinks       SocialLink?
  employmentHistory Job[]
  courses           Course[]
  portfolioItem     Portfolio[]
  languages         Language[]
  multimediaId      Int?
}

model Multimedia {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  created_by     Int
  file_name      String?
  file_path      String?
  file_size      String?
  file_type      String?
  file_extension String?
  file_height    String?
  status         Boolean  @default(true)
}

model Tag {
  id        Int       @id @default(autoincrement())
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  name      String
  profiles  Profile[]
}

model Skill {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  name        String
  profiles    ProfileSkill[]
  portfolio   Portfolio?     @relation(fields: [portfolioId], references: [id])
  portfolioId Int?
}

// relacion implicita vamos ahora

enum LVL {
  NOVICE
  BEGINER
  SKILLFULL
  EXPERIENCED
  EXPERT
}

model ProfileSkill {
  id        Int      @id @default(autoincrement())
  skill     Skill    @relation(fields: [skillId], references: [id])
  skillId   Int
  profile   Profile  @relation(fields: [profileId], references: [id])
  profileId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  level     LVL      @default(NOVICE)
}

model SocialLink {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  linkedin  String?
  instagram String?
  facebook  String?
  telegram  String?

  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}

model Job {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  name        String
  company     String?
  description String?
  startDate   DateTime
  endDate     DateTime?
  inProgress  Boolean   @default(false)
  profile     Profile?  @relation(fields: [profileId], references: [id])
  profileId   Int?
}

model Course {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  course      String
  institution String  
  description String?
  starDate    DateTime
  endDate     DateTime
  profile     Profile?  @relation(fields: [profileId], references: [id])
  profileId   Int?
}

model Portfolio {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  proyect     String?
  link        String?
  description String?
  skills      Skill[]
  screenshts  Int?
  startDate   DateTime?
  endDate     DateTime?
  profile     Profile?  @relation(fields: [profileId], references: [id])
  profileId   Int?
}

enum LANLVL {
  NATIVE_SPEAKER
  HIGHLY_PROFICIENT
  VERY_GOOD_COMMAND
  GOOD_WORKING_KNOWLEDGE
  WORKING_KNOWLEDGE
  C1
  C2
  B1
  B2
  A1
  A2
}

model Language {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  language  String
  lvl       LANLVL   @default(NATIVE_SPEAKER)
  profile   Profile? @relation(fields: [profileId], references: [id])
  profileId Int?
}
